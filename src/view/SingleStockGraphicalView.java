package view;

import interface_adapter.single_stock.SingleStockController;
import interface_adapter.single_stock.SingleStockState;
import interface_adapter.single_stock.SingleStockGraphicalState;
import interface_adapter.single_stock.SingleStockViewModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class SingleStockGraphicalView extends JPanel implements ActionListener, PropertyChangeListener {
    public final String viewName = "Graphical View";
    private final SingleStockViewModel controller;
    private final SingleStockController viewModel;
    private final MenuController menuController;
    private final JButton table;
    private final JButton menu;

    public SingleStockGraphicalView(SingleStockViewModel controller, SingleStockController viewModel,
                                    MenuController menuController){
        // Initial setup
        this.controller = controller;
        this.viewModel = viewModel;
        this.menuController = menuController;
        viewModel.addPropertyChangeListener(this);
        SingleStockGraphicalState = SingleStockViewModel.getSingleStockState();

        // Setting up stock title and symbols
        JLabel title = new JLabel(state.getName());
        title.setAlignmentX(Component.CENTER_ALIGNMENT);
        JLabel symbol = new JLabel(state.getSymbol());

        // Setting up new buttons
        JPanel buttons = new JPanel();
        table = new JButton(SingleStockViewModel.TABLE_BUTTON_LABEL);
        buttons.add(table);
        menu = new JButton(SingleStockViewModel.MENU_BUTTON_LABEL);
        buttons.add(menu);

        // Setting up the graph
        JPanel graph = new JPanel();
        JFreeChart chart = createChart(); // some chart is generated by the JFreeChart library in output data
        ChartPanel chartPanel = new ChartPanel(chart);
        graph.add(chartPanel); // add the chart to the panel


        menu.addActionListener(null);

        table.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getSource().equals(table)) {
                    controller.execute(viewModel.getSymbol(), 'Tabular');
                }
            }
        });

        // Adding buttons and setting layout
        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        this.add(title);
        this.add(symbol);
        this.add(graph);
        this.add(buttons);

    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }

    @Override
    public void actionPerformed(ActionEvent e) {

    }
}
