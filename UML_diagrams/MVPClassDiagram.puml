@startuml
'https://plantuml.com/class-diagram

class MenuView {
    + String viewName = "menu"
    - final SearchController
    - JTextField searchInputField
    - JButton search
}

class SearchView {
    + String viewName = "search"
    - final SingleStockTabularController
    - final SingleStockGraphicalController
    - JButton table
    - JButton graph
    - JLabel stockName
    - JLabel stockSymbol
}

class SingleStockTabularView {
    + String viewName = "single table"
    - final SingleStockGraphicalController
    - final MenuController
    - JLabel title
    - JLabel currentPrice
    - JLabel detail
    - JTable table
    - JButton graph
    - JButton menu
}

class SingleStockGraphicalView {
    + String viewName = "single graph"
    - final SingleStockTabularController
    - final MenuController
    - JLabel title
    - JLabel currentPrice
    - JLabel detail
    - JFreeChart graph
    - JButton table
    - JButton menu
}

class SearchController {
    + void execute(String symbol)
}

interface SearchInputBoundary {
    + void execute(String symbol)
}

interface SearchOutputBoundary {
    + prepareSuccessView(SearchOutputData data)
    + prepareFailView(String error)
}

class SearchOutputData {
    - String name
    - String symbol
}

interface SingleStockAPIAccessInterface {
    getStock()
}

interface SearchAPIAccessInterface {
    --
    + String timeSeries(String symbol, String interval, int outputSize))
    ===
    timeSeries return error or null
    if no error been thrown (ie, valid symbol), update the static variable stock
    using both api calls and private helper getInfo
    so SingleStockViews can access without further api call
}

class APIAccessObject implements SearchAPIAccessInterface, SingleStockAPIAccessInterface{
    - static Stock stock
    ---
    + String timeSeries(String symbol, String interval, int outputSize))
    - String getInfo(String symbol, String exchange)
    + getStock()
}

class SingleStockTabularController {
    + execute()
}

class SingleStockGraphicalController {
    + execute()
}

interface SingleStockInputBoundary {
    + execute()
}

interface SingleStockOutputBoundary {
    + prepareView(SingleStockOutputData data)
}

class SingleStockOutputData {
    - String title
    - String currentPrice
    - String detail
}

class SingleStockTabularOutputData extends SingleStockOutputData{
    - Object[][] data
    - String[] columnNames
    --
    + SingleStockOutputTabularData(Object[][] data,
    String[] columnNames, String name, String symbol, float currentPrice,
    String currency, String exchange, String country, String type)

}

class SingleStockGraphicalOutputData extends SingleStockOutputData {
    - OHLCDataSet data
}

class MenuController {
    + execute()
}

class SearchInteractor

SearchController -- SearchInputBoundary
SearchInputBoundary -- SearchInteractor
SearchInteractor - SearchAPIAccessInterface
SearchOutputData - SearchInteractor
SearchOutputData -- SearchOutputBoundary
SearchInteractor -- SearchOutputBoundary
SearchOutputBoundary -- SearchPresenter
SearchPresenter -- SearchViewModel
SearchViewModel -- SearchState

class ViewModel {}

class SearchViewModel extends ViewModel{
    + static TABLE_BUTTON_LABEL = "Table"
    + static GRAPH_BUTTON_LABEL = "Graph"
    - SearchState state

}
class SearchState {
    - String name
    - String symbol
}

class SearchPresenter

class SingleStockViewModel extends ViewModel {
    + static MENU_BUTTON_LABEL = "Menu"
    + static TABLE_BUTTON_LABEL = "Table"
    + static GRAPH_BUTTON_LABEL = "Graph"
    - SingleStockState state

}

class SingleStockState {
    - String title
    - String currentPrice
    - String detail
}

class SingleStockTabularState extends SingleStockState {
    - Object[][] data
    - String[] columnNames
}

class SingleStockGraphicalState extends SingleStockState {
    - OHLCDataSet data
}

class SingleStockPresenter {}

class SingleStockInteractor {}

SingleStockTabularController -- SingleStockInputBoundary
SingleStockInputBoundary -- SingleStockInteractor : Might need to completely separate Tabular and Graphical use cases
SingleStockAPIAccessInterface - SingleStockInteractor
SingleStockInteractor - SingleStockOutputData
SingleStockInteractor -- SingleStockOutputBoundary
SingleStockOutputData -- SingleStockOutputBoundary
SingleStockOutputBoundary -- SingleStockPresenter
SingleStockPresenter -- SingleStockViewModel
SingleStockViewModel -- SingleStockState
SingleStockGraphicalController -- SingleStockInputBoundary


SingleStockViewModel ---  SingleStockTabularView
SingleStockTabularState -- SingleStockTabularView
SingleStockGraphicalState -- SingleStockGraphicalView
SingleStockViewModel --- SingleStockGraphicalView
SearchViewModel --- SearchView
SearchState -- SearchView
MenuController --- MenuView: Omit details

class Stock {
    - String name
    - String Symbol
    - String exchange
    - String currency
    - String country
    - String type
    - float currentPrice
    - StockPrice[] historicalPrice
    + getHistoricalData()
    + getHistoricalColumnName()
}

class StockPrice {
    - String date
    - float open
    - float close
    - float high
    - float low
    - int volume
}




@enduml